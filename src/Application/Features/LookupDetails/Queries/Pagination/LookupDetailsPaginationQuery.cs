//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: neozhu
//     Created Date: 2025-01-06
//     Last Modified: 2025-01-06
//     Description: 
//       Defines a query for retrieving lookupdetails with pagination and filtering 
//       options. The result is cached to enhance performance for repeated queries.
// </auto-generated>
//------------------------------------------------------------------------------

using CleanArchitecture.Blazor.Application.Features.LookupDetails.DTOs;
using CleanArchitecture.Blazor.Application.Features.LookupDetails.Caching;
using CleanArchitecture.Blazor.Application.Features.LookupDetails.Mappers;
using CleanArchitecture.Blazor.Application.Features.LookupDetails.Specifications;

namespace CleanArchitecture.Blazor.Application.Features.LookupDetails.Queries.Pagination;

public class LookupDetailsWithPaginationQuery : LookupDetailAdvancedFilter, IRequest<PaginatedData<LookupDetailDto>>
{
    public override string ToString()
    {
        return $"Listview:{ListView}:{CurrentUser?.UserId}-{LocalTimezoneOffset.TotalHours}, Search:{Keyword}, {OrderBy}, {SortDirection}, {PageNumber}, {PageSize}";
    }
    public LookupDetailAdvancedSpecification Specification => new LookupDetailAdvancedSpecification(this);
}

public class LookupDetailsWithPaginationQueryHandler :
         IRequestHandler<LookupDetailsWithPaginationQuery, PaginatedData<LookupDetailDto>>
{
    private readonly IApplicationDbContext _context;
    private readonly ISqlConnectionFactory _sqlConnectionFactory;

    public LookupDetailsWithPaginationQueryHandler(
            IApplicationDbContext context, ISqlConnectionFactory sqlConnectionFactory)
    {
        _context = context;
        _sqlConnectionFactory = sqlConnectionFactory;
    }

    public async Task<PaginatedData<LookupDetailDto>> Handle(LookupDetailsWithPaginationQuery request, CancellationToken cancellationToken)
    {
        var sql = $"""
            SELECT LD.Id, 
            	LD.LookupId, 
            	LD.Code, 
            	LD.Name, 
            	LD.NameBN, 
            	LD.Description, 
            	LD.IsActive, 
            	LD.Created, 
            	LD.CreatedBy, 
            	LD.LastModified, 
            	LD.LastModifiedBy,
            	L.Name LookupName
            FROM LookupDetails LD 
            INNER JOIN Lookups L ON LD.LookupId = L.Id
            """;

        var datata = await PaginatedData<LookupDetailDto>.CreateAsync(_sqlConnectionFactory.GetOpenConnection(), sql, request);
           var data = await _context.LookupDetails.Include("Lookup").OrderBy($"{request.OrderBy} {request.SortDirection}")
                                                   .ProjectToPaginatedDataAsync(request.Specification,
                                                                                request.PageNumber,
                                                                                request.PageSize,
                                                                                LookupDetailMapper.ToDto,
                                                                                cancellationToken);
        return datata;
    }
}