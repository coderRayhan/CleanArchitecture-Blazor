//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under one or more agreements.
//     The .NET Foundation licenses this file to you under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: neozhu
//     Created Date: 2025-01-06
//     Last Modified: 2025-01-06
//     Description: 
//       This file defines the command for adding or editing a lookup entity,
//       including validation and mapping operations. It handles domain events
//       and cache invalidation for updated or newly created lookup.
//     
//     Documentation:
//       https://docs.cleanarchitectureblazor.com/features/lookup
// </auto-generated>
//------------------------------------------------------------------------------

// Usage:
// This command can be used to add a new lookup or edit an existing one.
// It handles caching logic and domain event raising automatically.


using CleanArchitecture.Blazor.Application.Features.Lookups.Caching;
using CleanArchitecture.Blazor.Application.Features.Lookups.Mappers;

namespace CleanArchitecture.Blazor.Application.Features.Lookups.Commands.AddEdit;

public class AddEditLookupCommand: IRequest<Result<int>>
{
      [Description("Id")]
      public int Id { get; set; }
          [Description("Code")]
    public string? Code {get;set;} 
    [Description("Name")]
    public string Name {get;set;} 
    [Description("Name Bangla")]
    public string? NameBN {get;set;} 
    [Description("Parent id")]
    public int? ParentId {get;set;}
    [Description("Status")]
    public bool IsActive { get; set; } = true;
    [Description("Dev code")]
    public DevCode? DevCode {get;set;} 

}

public class AddEditLookupCommandHandler : IRequestHandler<AddEditLookupCommand, Result<int>>
{
    private readonly IApplicationDbContext _context;
    public AddEditLookupCommandHandler(
        IApplicationDbContext context)
    {
        _context = context;
    }
    public async Task<Result<int>> Handle(AddEditLookupCommand request, CancellationToken cancellationToken)
    {
        if (request.Id > 0)
        {
            var item = await _context.Lookups.FindAsync(request.Id, cancellationToken);
            if (item == null)
            {
                return await Result<int>.FailureAsync($"Lookup with id: [{request.Id}] not found.");
            }
            LookupMapper.ApplyChangesFrom(request,item);
			// raise a update domain event
			//item.AddDomainEvent(new LookupUpdatedEvent(item));
            await _context.SaveChangesAsync(cancellationToken);
            return await Result<int>.SuccessAsync(item.Id);
        }
        else
        {
            var item = LookupMapper.FromEditCommand(request);
            // raise a create domain event
			//item.AddDomainEvent(new LookupCreatedEvent(item));
            _context.Lookups.Add(item);
            await _context.SaveChangesAsync(cancellationToken);
            return await Result<int>.SuccessAsync(item.Id);
        }
       
    }
}

