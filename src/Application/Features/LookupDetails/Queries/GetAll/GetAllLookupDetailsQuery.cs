//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: neozhu
//     Created Date: 2025-01-06
//     Last Modified: 2025-01-06
//     Description: 
//       Defines a query to retrieve all lookupdetails from the database. The result 
//       is cached to improve performance and reduce database load for repeated 
//       queries.
// </auto-generated>
//------------------------------------------------------------------------------

using CleanArchitecture.Blazor.Application.Features.LookupDetails.DTOs;
using CleanArchitecture.Blazor.Application.Features.LookupDetails.Mappers;
using CleanArchitecture.Blazor.Application.Features.LookupDetails.Caching;

namespace CleanArchitecture.Blazor.Application.Features.LookupDetails.Queries.GetAll;

public class GetAllLookupDetailsQuery : IRequest<IEnumerable<LookupDetailDto>>
{
}

public class GetAllLookupDetailsQueryHandler :
     IRequestHandler<GetAllLookupDetailsQuery, IEnumerable<LookupDetailDto>>
{
    private readonly IApplicationDbContext _context;

    public GetAllLookupDetailsQueryHandler(
        IApplicationDbContext context)
    {
        _context = context;
    }

    public async Task<IEnumerable<LookupDetailDto>> Handle(GetAllLookupDetailsQuery request, CancellationToken cancellationToken)
    {
        var data = await _context.LookupDetails.ProjectTo()
                                                .AsNoTracking()
                                                .ToListAsync(cancellationToken);
        return data;
    }
}


