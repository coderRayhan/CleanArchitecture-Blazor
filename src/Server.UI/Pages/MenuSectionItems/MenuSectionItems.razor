@page "/system/MenuSectionItems"

@using BlazorDownloadFile
@using CleanArchitecture.Blazor.Application.Features.MenuSectionItems.Caching
@using CleanArchitecture.Blazor.Application.Features.MenuSectionItems.DTOs
@using CleanArchitecture.Blazor.Application.Features.MenuSectionItems.Mappers
@using CleanArchitecture.Blazor.Application.Features.MenuSectionItems.Specifications
@using CleanArchitecture.Blazor.Application.Features.MenuSectionItems.Commands.Delete
@using CleanArchitecture.Blazor.Application.Features.MenuSectionItems.Commands.Import
@using CleanArchitecture.Blazor.Application.Features.MenuSectionItems.Queries.Export
@using CleanArchitecture.Blazor.Application.Features.MenuSectionItems.Queries.Pagination
@using CleanArchitecture.Blazor.Application.Features.MenuSectionItems.Commands.AddEdit
@using CleanArchitecture.Blazor.Server.UI.Pages.MenuSectionItems.Components

@inject IStringLocalizer<MenuSectionItems> L
@attribute [Authorize(Policy = Permissions.MenuSectionItems.View)]
<PageTitle>@Title</PageTitle>

<MudDataGrid ServerData="@(ServerReload)"
			 FixedHeader="true"
			 FixedFooter="true"
			 Virtualize="true"
			 @bind-RowsPerPage="_defaultPageSize"
			 Height="calc(100vh - 330px)"
			 Loading="@_loading"
			 MultiSelection="true"
			 T="MenuSectionItemDto"
			 SelectOnRowClick="false"
			 @bind-SelectedItems="_selectedItems"
			 @bind-SelectedItem="_currentDto"
			 Hover="true" @ref="_table" Class="pt-6">
	<ToolBarContent>
		<MudStack Row Spacing="0" Class="flex-grow-1" Justify="Justify.SpaceBetween">
			<MudStack Row AlignItems="AlignItems.Start">
				<MudIcon Icon="@Icons.Material.Filled.Window" Size="Size.Large" />
				<MudStack Spacing="0">
					<MudText Typo="Typo.subtitle2" Class="mb-2">@Title</MudText>
					<MudEnumSelect Style="min-width:120px" TEnum="MenuSectionItemListView" ValueChanged="OnChangedListView" Value="Query.ListView" Dense="true" Label="@L["List View"]">
					</MudEnumSelect>
				</MudStack>
			</MudStack>
			<MudStack Spacing="0" AlignItems="AlignItems.End">
				<MudToolBar Dense WrapContent="true" Class="py-1 px-0">
					<MudButton Disabled="@_loading"
							   OnClick="@(() => OnRefresh())"
							   StartIcon="@Icons.Material.Outlined.Refresh">
						@ConstantString.Refresh
					</MudButton>
					@if (_canCreate)
					{
						<MudButton StartIcon="@Icons.Material.Outlined.Add"
								   OnClick="OnCreate">
							@ConstantString.New
						</MudButton>
					}
					<MudMenu TransformOrigin="Origin.BottomRight" AnchorOrigin="Origin.BottomRight" EndIcon="@Icons.Material.Filled.MoreVert" Label="@ConstantString.More">
						@if (_canCreate)
						{
							<MudMenuItem Disabled="@(_selectedItems.Count != 1)" OnClick="OnClone">@ConstantString.Clone</MudMenuItem>
						}
						@if (_canDelete)
						{
							<MudMenuItem Disabled="@(!(_selectedItems.Count > 0))"
										 OnClick="OnDeleteChecked">
								@ConstantString.Delete
							</MudMenuItem>
						}
						@if (_canExport)
						{
							<MudMenuItem Disabled="@_exporting"
										 OnClick="OnExport">
								@ConstantString.Export
							</MudMenuItem>
						}
						@if (_canImport)
						{
							<MudMenuItem>
								<MudFileUpload T="IBrowserFile" FilesChanged="OnImportData" Accept=".xlsx">
									<ActivatorContent>
										<MudButton Class="pa-0 ma-0" Style="font-weight:400;text-transform:none;"
												   Variant="Variant.Text"
												   Disabled="@_uploading">
											@ConstantString.Import
										</MudButton>
									</ActivatorContent>
								</MudFileUpload>
							</MudMenuItem>
						}
					</MudMenu>
				</MudToolBar>
				<MudStack Row Spacing="1">
					@if (_canSearch)
					{
						<MudTextField T="string" ValueChanged="@(s => OnSearch(s))" Value="@Query.Keyword" Placeholder="@ConstantString.Search" Adornment="Adornment.End"
									  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small">
						</MudTextField>
					}
				</MudStack>
			</MudStack>
		</MudStack>
	</ToolBarContent>
	<Columns>
		<SelectColumn ShowInFooter="false"></SelectColumn>
		<TemplateColumn HeaderStyle="width:60px" Title="@ConstantString.Actions" Sortable="false">
			<CellTemplate>
				@if (_canEdit || _canDelete)
				{
					<MudMenu Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Size="Size.Small"
							 Dense="true"
							 EndIcon="@Icons.Material.Filled.KeyboardArrowDown" IconColor="Color.Info" AnchorOrigin="Origin.CenterLeft">
						@if (_canEdit)
						{
							<MudMenuItem OnClick="@(()=>OnEdit(context.Item))">@ConstantString.Edit</MudMenuItem>
						}
						@if (_canDelete)
						{
							<MudMenuItem OnClick="@(()=>OnDelete(context.Item))">@ConstantString.Delete</MudMenuItem>
						}
					</MudMenu>
				}
				else
				{
					<MudIconButton Variant="Variant.Filled"
								   Disabled="true"
								   Icon="@Icons.Material.Filled.DoNotTouch"
								   Size="Size.Small"
								   Color="Color.Surface">
						@ConstantString.NoAllowed
					</MudIconButton>
				}
			</CellTemplate>
		</TemplateColumn>
		@*TODO: Define the fields that should be displayed in data table*@
		<PropertyColumn Property="x => x.MenuSection.Title" Title="@L[_currentDto.GetMemberDescription(x=>x.MenuSection)]" />
		<PropertyColumn Property="x => x.Title" Title="@L[_currentDto.GetMemberDescription(x=>x.Title)]" />
		<PropertyColumn Property="x => x.Icon" Title="@L[_currentDto.GetMemberDescription(x=>x.Icon)]">
		<CellTemplate>
			<MudIcon Icon="@context.Item.Icon"></MudIcon>
		</CellTemplate>	
		</PropertyColumn>
		<PropertyColumn Property="x => x.Href" Title="@L[_currentDto.GetMemberDescription(x=>x.Href)]" />
		<PropertyColumn Property="x => x.Target" Title="@L[_currentDto.GetMemberDescription(x=>x.Target)]" />
		<PropertyColumn Property="x => x.PageStatus" Title="@L[_currentDto.GetMemberDescription(x=>x.PageStatus)]">
			<CellTemplate>
				<MudChip T="string" Value="@context.Item.PageStatus.GetDescription()" />
			</CellTemplate>
		</PropertyColumn>
		<PropertyColumn Property="x => x.IsParent" Title="@L[_currentDto.GetMemberDescription(x=>x.IsParent)]">
            <CellTemplate>
                <MudChip T="string" Value="@context.Item.IsParent.ToString()" />
            </CellTemplate>    
        </PropertyColumn>

	</Columns>
	<NoRecordsContent>
		<MudText>@ConstantString.NoRecords</MudText>
	</NoRecordsContent>
	<LoadingContent>
		<MudText>@ConstantString.Loading</MudText>
	</LoadingContent>
	<PagerContent>
		<MudDataGridPager PageSizeOptions="@(new int[]{10,15,30,50,100,500,1000})" />
	</PagerContent>
</MudDataGrid>



@code {
	public string? Title { get; private set; }
	private int _defaultPageSize = 15;
	private HashSet<MenuSectionItemDto> _selectedItems = new HashSet<MenuSectionItemDto>();
	private MudDataGrid<MenuSectionItemDto> _table = default!;
	private MenuSectionItemDto _currentDto = new();
	private bool _loading;
	private bool _uploading;
	private bool _exporting;
	[CascadingParameter]
	private Task<AuthenticationState> AuthState { get; set; } = default!;
	[CascadingParameter]
	private UserProfile? UserProfile { get; set; }
	[CascadingParameter(Name = "LocalTimezoneOffset")]
	private TimeSpan _localTimezoneOffset { get; set; }

	private MenuSectionItemsWithPaginationQuery Query { get; set; } = new();
	[Inject]
	private IBlazorDownloadFileService BlazorDownloadFileService { get; set; } = null!;
	private bool _canSearch;
	private bool _canCreate;
	private bool _canEdit;
	private bool _canDelete;
	private bool _canImport;
	private bool _canExport;

	protected override async Task OnInitializedAsync()
	{
		Title = L[_currentDto.GetClassDescription()];
		var state = await AuthState;
		_canCreate = (await AuthService.AuthorizeAsync(state.User, Permissions.MenuSectionItems.Create)).Succeeded;
		_canSearch = (await AuthService.AuthorizeAsync(state.User, Permissions.MenuSectionItems.Search)).Succeeded;
		_canEdit = (await AuthService.AuthorizeAsync(state.User, Permissions.MenuSectionItems.Edit)).Succeeded;
		_canDelete = (await AuthService.AuthorizeAsync(state.User, Permissions.MenuSectionItems.Delete)).Succeeded;
		_canImport = (await AuthService.AuthorizeAsync(state.User, Permissions.MenuSectionItems.Import)).Succeeded;
		_canExport = (await AuthService.AuthorizeAsync(state.User, Permissions.MenuSectionItems.Export)).Succeeded;
	}
	private async Task<GridData<MenuSectionItemDto>> ServerReload(GridState<MenuSectionItemDto> state)
	{
		try
		{
			_loading = true;
			Query.CurrentUser = UserProfile;
			Query.OrderBy = state.SortDefinitions.FirstOrDefault()?.SortBy ?? "Id";
			Query.SortDirection = state.SortDefinitions.FirstOrDefault()?.Descending ?? true ? SortDirection.Descending.ToString() : SortDirection.Ascending.ToString();
			Query.PageNumber = state.Page + 1;
			Query.PageSize = state.PageSize;
			Query.LocalTimezoneOffset = _localTimezoneOffset;
			var result = await Mediator.Send(Query).ConfigureAwait(false);
			return new GridData<MenuSectionItemDto>() { TotalItems = result.TotalItems, Items = result.Items };
		}
		finally
		{
			_loading = false;
		}

	}
	private async Task OnSearch(string text)
	{
		_selectedItems = new();
		Query.Keyword = text;
		await _table.ReloadServerData();
	}
	private async Task OnChangedListView(MenuSectionItemListView listview)
	{
		Query.ListView = listview;
		await _table.ReloadServerData();
	}
	private async Task OnRefresh()
	{
		MenuSectionItemCacheKey.Refresh();
		_selectedItems = new();
		Query.Keyword = string.Empty;
		await _table.ReloadServerData();
	}
	private async Task ShowEditFormDialog(string title, AddEditMenuSectionItemCommand command)
	{
		var parameters = new DialogParameters<MenuSectionItemFormDialog>
			{
				{ x=>x.model,command },
			};
		var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
		var dialog = DialogService.Show<MenuSectionItemFormDialog>(title, parameters, options);
		var state = await dialog.Result;

		if (state != null && !state.Canceled)
		{
			await _table.ReloadServerData();
			_selectedItems.Clear();
		}
	}
	
	private async Task OnCreate()
	{
		var command = new AddEditMenuSectionItemCommand();
		await ShowEditFormDialog(string.Format(ConstantString.CreateAnItem, L["Menu Section Item"]), command);
	}
	private async Task OnClone()
	{
		var dto = _selectedItems.First();
		var command = MenuSectionItemMapper.CloneFromDto(dto);
		await ShowEditFormDialog(string.Format(ConstantString.CreateAnItem, L["MenuSectionItem"]), command);
	}
	private async Task OnEdit(MenuSectionItemDto dto)
	{
		var command = MenuSectionItemMapper.ToEditCommand(dto);
		await ShowEditFormDialog(string.Format(ConstantString.EditTheItem, L["MenuSectionItem"]), command);
	}

	private async Task OnDelete(MenuSectionItemDto dto)
	{
		var contentText = string.Format(ConstantString.DeleteConfirmation, dto.Title);
		var command = new DeleteMenuSectionItemCommand(new int[] { dto.Id });
		await DialogServiceHelper.ShowDeleteConfirmationDialogAsync(command, ConstantString.DeleteConfirmationTitle, contentText, async () =>
		{
			await InvokeAsync(async () =>
			{
				await _table.ReloadServerData();
				_selectedItems.Clear();
			});
		});
	}

	private async Task OnDeleteChecked()
	{
		var contentText = string.Format(ConstantString.DeleteConfirmWithSelected, _selectedItems.Count);
		var command = new DeleteMenuSectionItemCommand(_selectedItems.Select(x => x.Id).ToArray());
		await DialogServiceHelper.ShowDeleteConfirmationDialogAsync(command, ConstantString.DeleteConfirmationTitle, contentText, async () =>
		{
			await InvokeAsync(async () =>
			{
				await _table.ReloadServerData();
				_selectedItems.Clear();
			});
		});
	}

	private async Task OnExport()
	{
		_exporting = true;
		var request = new ExportMenuSectionItemsQuery()
			{
				Keyword = Query.Keyword,
				CurrentUser = UserProfile,
				ListView = Query.ListView,
				OrderBy = _table.SortDefinitions.Values.FirstOrDefault()?.SortBy ?? "Id",
				SortDirection = (_table.SortDefinitions.Values.FirstOrDefault()?.Descending ?? true) ? SortDirection.Descending.ToString() : SortDirection.Ascending.ToString()
			};
		var result = await Mediator.Send(request);
		await result.MatchAsync<byte[]>(
			async data =>
			{
				var downloadresult = await BlazorDownloadFileService.DownloadFile($"{L["MenuSectionItems"]}.xlsx", result.Data, contentType: "application/octet-stream");
				Snackbar.Add($"{ConstantString.ExportSuccess}", MudBlazor.Severity.Info);
				return data;
			},
			errors =>
			{
				Snackbar.Add($"{errors}", MudBlazor.Severity.Error);
				return Task.FromResult(Array.Empty<byte>());
			});
		_exporting = false;
	}
	private async Task OnImportData(IBrowserFile file)
	{
		_uploading = true;
		var stream = new MemoryStream();
		await file.OpenReadStream().CopyToAsync(stream);
		var command = new ImportMenuSectionItemsCommand(file.Name, stream.ToArray());
		var result = await Mediator.Send(command);
		await result.MatchAsync(
			async data =>
			{
				await _table.ReloadServerData();
				Snackbar.Add($"{ConstantString.ImportSuccess}", MudBlazor.Severity.Info);
				return data;
			}, errors =>
			{
				Snackbar.Add($"{errors}", MudBlazor.Severity.Error);
				return Task.FromResult(0);
			});
		_uploading = false;
	}

}
