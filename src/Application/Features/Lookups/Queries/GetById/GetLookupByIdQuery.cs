//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: neozhu
//     Created Date: 2025-01-06
//     Last Modified: 2025-01-06
//     Description: 
//       Defines a query to retrieve a lookup by its ID. The result is cached 
//       to optimize performance for repeated retrievals of the same lookup.
// </auto-generated>
//------------------------------------------------------------------------------

using CleanArchitecture.Blazor.Application.Features.Lookups.DTOs;
using CleanArchitecture.Blazor.Application.Features.Lookups.Caching;
using CleanArchitecture.Blazor.Application.Features.Lookups.Mappers;
using CleanArchitecture.Blazor.Application.Features.Lookups.Specifications;

namespace CleanArchitecture.Blazor.Application.Features.Lookups.Queries.GetById;

public class GetLookupByIdQuery : IRequest<Result<LookupDto>>
{
   public required int Id { get; set; }
}

public class GetLookupByIdQueryHandler :
     IRequestHandler<GetLookupByIdQuery, Result<LookupDto>>
{
    private readonly IApplicationDbContext _context;

    public GetLookupByIdQueryHandler(
        IApplicationDbContext context)
    {
        _context = context;
    }

    public async Task<Result<LookupDto>> Handle(GetLookupByIdQuery request, CancellationToken cancellationToken)
    {
        var data = await _context.Lookups.ApplySpecification(new LookupByIdSpecification(request.Id))
                                                .ProjectTo()
                                                .FirstAsync(cancellationToken);
        return await Result<LookupDto>.SuccessAsync(data);
    }
}
