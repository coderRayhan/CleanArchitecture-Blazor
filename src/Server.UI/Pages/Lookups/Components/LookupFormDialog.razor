@using CleanArchitecture.Blazor.Application.Common.Constants
@using CleanArchitecture.Blazor.Application.Features.Lookups.Commands.AddEdit
@using CleanArchitecture.Blazor.Application.Features.Lookups.DTOs
@using CleanArchitecture.Blazor.Domain.Common.Enums

@inherits MudComponentBase
@inject IValidationService Validator
@inject IStringLocalizer<Lookups> L

<MudDialog>
    <DialogContent>
        <MudForm Model="@model" @ref="@_form" Validation="@(Validator.ValidateValue(model))">
            <MudGrid>
                @*TODO: define mudform that should be edit fields, for example:*@
                <MudItem xs="12" md="6"> 
                    <MudTextField Label="@L[model.GetMemberDescription(x=>x.Code)]" @bind-Value="model.Code" For="@(() => model.Code)" Required="true" RequiredError="@L["code is required!"]"></MudTextField>
                </MudItem> 
                <MudItem xs="12" md="6"> 
                    <MudTextField Label="@L[model.GetMemberDescription(x=>x.Name)]" @bind-Value="model.Name" For="@(() => model.Name)" Required="true" RequiredError="@L["name is required!"]"></MudTextField>
                </MudItem> 
                <MudItem xs="12" md="6"> 
                    <MudTextField Label="@L[model.GetMemberDescription(x=>x.NameBN)]" @bind-Value="model.NameBN" For="@(() => model.NameBN)" Required="false" RequiredError="@L["name bn is required!"]"></MudTextField>
                </MudItem> 
                <MudItem xs="12" md="6"> 
                    <MudAutocomplete T="LookupDto"
                                     Label="Parent"
                                     @bind-Value="selectedItem"
                                     CoerceText="true"
                                     ToStringFunc="@(m => m == null ? string.Empty : m.Name)"
                                     SearchFunc="SearchItems"
                                     ResetValueOnEmptyText="true"
                                     Clearable="true"/>
                </MudItem> 

            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@ConstantString.Cancel</MudButton>
        <MudLoadingButton Loading="@_savingnew" OnClick="SaveAndNew">@ConstantString.SaveAndNew</MudLoadingButton>
        <MudLoadingButton Loading="@_saving"  OnClick="Submit">@ConstantString.Save</MudLoadingButton>
    </DialogActions>
</MudDialog>

@code {
    MudForm? _form;
    private bool _saving = false;
    private bool _savingnew = false;
    [CascadingParameter]
    IMudDialogInstance MudDialog { get; set; } = default!;
    AddEditLookupCommandValidator _modelValidator = new ();
    [EditorRequired] [Parameter] public AddEditLookupCommand model { get; set; } = null!;
    [Inject] ISelectListService<LookupDto> _selectListService { get; set; }

    private LookupDto selectedItem;
    private IEnumerable<LookupDto> lookupDtos = new List<LookupDto>();

    protected override async Task OnInitializedAsync()
    {
        lookupDtos = await _selectListService.GetSelectList(SelectListConstants.GetLookupSelectList, new { });
        selectedItem = lookupDtos
        .FirstOrDefault(e => e.Id == model.ParentId) ?? new LookupDto();
    }

    async Task Submit()
    {
        try
        {
            _saving = true;
            await _form!.Validate().ConfigureAwait(false);
            if (!_form!.IsValid)
                return;

            model.ParentId = selectedItem.Id;
            var result = await Mediator.Send(model);
            result.Match(data =>
            {
                MudDialog.Close(DialogResult.Ok(true));
                Snackbar.Add(ConstantString.SaveSuccess, MudBlazor.Severity.Info);
                return data;
            }, errors =>
            {
                Snackbar.Add(errors, MudBlazor.Severity.Error);
                return -1;
            });
        }
        finally
        {
            _saving = false;
        }
    }
    async Task SaveAndNew()
    {
        try
        {
            _savingnew = true;
            await _form!.Validate().ConfigureAwait(false);
            if (!_form!.IsValid)
               return;

            model.ParentId = selectedItem.Id;
            var result = await Mediator.Send(model);
            await result.MatchAsync(async data =>
            {
                Snackbar.Add(ConstantString.SaveSuccess, MudBlazor.Severity.Info);
                await Task.Delay(300);
                model = new AddEditLookupCommand() { };
                return data;
            }, errors =>
            {
                Snackbar.Add(errors, MudBlazor.Severity.Error);
                return Task.FromResult(-1);
            });
        }
        finally
        {
            _savingnew = false;
        }
    }
    void Cancel() => MudDialog.Cancel();

    private async Task<IEnumerable<LookupDto>> SearchItems(string searchText, CancellationToken cancellationToken)
    {
        if (string.IsNullOrWhiteSpace(searchText))
            return lookupDtos.AsEnumerable();

        return lookupDtos.Where(x => x.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase));
    }
}