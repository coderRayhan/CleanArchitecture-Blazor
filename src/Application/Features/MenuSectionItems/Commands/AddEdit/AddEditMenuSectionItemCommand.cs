//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under one or more agreements.
//     The .NET Foundation licenses this file to you under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: neozhu
//     Created Date: 2024-12-09
//     Last Modified: 2024-12-09
//     Description: 
//       This file defines the command for adding or editing a menusectionitem entity,
//       including validation and mapping operations. It handles domain events
//       and cache invalidation for updated or newly created menusectionitem.
//     
//     Documentation:
//       https://docs.cleanarchitectureblazor.com/features/menusectionitem
// </auto-generated>
//------------------------------------------------------------------------------

// Usage:
// This command can be used to add a new menusectionitem or edit an existing one.
// It handles caching logic and domain event raising automatically.


using CleanArchitecture.Blazor.Application.Features.MenuSectionItems.Mappers;
using CleanArchitecture.Blazor.Application.Features.MenuSections.DTOs;
using CleanArchitecture.Blazor.Domain.Events.MenuSectionItems;

namespace CleanArchitecture.Blazor.Application.Features.MenuSectionItems.Commands.AddEdit;

public class AddEditMenuSectionItemCommand: IRequest<Result<int>>
{
      [Description("Id")]
      public int Id { get; set; }
    [Description("Menu section id")]
    public int MenuSectionId { get; set; } = 0;
    [Description("Title")]
    public string? Title {get;set;} 
    [Description("Icon")]
    public string? Icon {get;set;} 
    [Description("Href")]
    public string? Href {get;set;} 
    [Description("Target")]
    public string? Target {get;set;} 
    [Description("Roles")]
    public string[] Roles {get;set;} 
    [Description("Page status")]
    public PageStatus? PageStatus {get;set;} 
    [Description("Is parent")]
    public bool IsParent {get;set;}
    [Description("Serial Number")]
    public int SerialNo { get; set; }
    [Description("Menu section")]
    public MenuSectionDto MenuSection {get;set;} 

}

public class AddEditMenuSectionItemCommandHandler : IRequestHandler<AddEditMenuSectionItemCommand, Result<int>>
{
    private readonly IApplicationDbContext _context;
    public AddEditMenuSectionItemCommandHandler(
        IApplicationDbContext context)
    {
        _context = context;
    }
    public async Task<Result<int>> Handle(AddEditMenuSectionItemCommand request, CancellationToken cancellationToken)
    {
        if (request.Id > 0)
        {
            var item = await _context.MenuSectionItems.FindAsync(request.Id, cancellationToken);
            if (item == null)
            {
                return await Result<int>.FailureAsync($"MenuSectionItem with id: [{request.Id}] not found.");
            }
            MenuSectionItemMapper.ApplyChangesFrom(request,item);
			// raise a update domain event
			item.AddDomainEvent(new MenuSectionItemUpdatedEvent(item));
            await _context.SaveChangesAsync(cancellationToken);
            return await Result<int>.SuccessAsync(item.Id);
        }
        else
        {
            var item = MenuSectionItemMapper.FromEditCommand(request);
            // raise a create domain event
			item.AddDomainEvent(new MenuSectionItemCreatedEvent(item));
            _context.MenuSectionItems.Add(item);
            await _context.SaveChangesAsync(cancellationToken);
            return await Result<int>.SuccessAsync(item.Id);
        }
       
    }
}

