@using CleanArchitecture.Blazor.Application.Common.Constants
@using CleanArchitecture.Blazor.Application.Features.Common.Queries
@using CleanArchitecture.Blazor.Application.Features.MenuSectionItems.Commands.AddEdit
@using CleanArchitecture.Blazor.Application.Features.MenuSections.DTOs
@using CleanArchitecture.Blazor.Domain.Common.Enums
@using CleanArchitecture.Blazor.Server.UI.Models.NavigationMenu.Icon

@inherits MudComponentBase
@inject IValidationService Validator
@inject IStringLocalizer<MenuSectionItems> L

<MudDialog>
	<DialogContent>
		<MudForm Model="@model" @ref="@_form" Validation="@(Validator.ValidateValue(model))">
			<MudGrid>
				@*TODO: define mudform that should be edit fields, for example:*@
				<MudItem xs="12" md="6">
                    <MudAutocomplete T="MenuSectionDto"
                                     Label="Menu Section"
                                     @bind-Value="selectedItem"
                                     CoerceText="true"
                                     ToStringFunc="@(m => m == null ? string.Empty : m.Title)"
                                     SearchFunc="SearchItems"
                                     ResetValueOnEmptyText="true"
                                     Clearable="true"
                                     Required="true"
                                     RequiredError="Please select a menu section."
                                     Validation="@(new Func<MenuSectionDto, bool>(item => item != null && item.Id > 0))"/>

				</MudItem>
				<MudItem xs="12" md="6">
					<MudTextField Label="@L[model.GetMemberDescription(x=>x.Title)]"
								  @bind-Value="model.Title"
								  For="@(() => model.Title)"
								  Required="false"
								  RequiredError="@L["title is required!"]">
					</MudTextField>
				</MudItem>
				<MudItem xs="12" md="6">
					@* <MudTextField Label="@L[model.GetMemberDescription(x=>x.Icon)]" @bind-Value="model.Icon" For="@(() => model.Icon)" Required="false" RequiredError="@L["icon is required!"]"></MudTextField> *@

                    <MudAutocomplete T="IconItem"
                                     Label="Select an Icon"
                                     Value="selectedIcon"
                                     ValueChanged="OnIconChanged"
                                     ToStringFunc="icon => icon?.Name"
                                     SearchFunc="SearchIcons"
                                     CoerceValue="true"
                                     Clearable="true"
                                     Required="true"
                                     RequiredError="Please select an icon.">
                        <!-- Custom template to show icon and name -->
                        <ItemTemplate>
                            @if (context != null)
                            {
                                <MudListItem T="IconItem" Value="selectedIcon">
                                    <MudIcon Icon="@context.Value" Style="margin-right: 8px;" />
                                    @context.Name
                                </MudListItem>
                            }
                        </ItemTemplate>
                    </MudAutocomplete>

					@* <MudSelect T="IconItem" Label="Icon" Value="selectedIcon" ValueChanged="OnIconChanged" Clearable="true">
						@foreach (var icon in allIcons)
						{
							<MudSelectItem T="IconItem" Value="@icon">
								<MudIcon Icon="@icon.Value" Style="margin-right: 8px;" />
								@icon.Name
							</MudSelectItem>
						}
					</MudSelect> *@
				</MudItem>
				<MudItem xs="12" md="6">
					<MudTextField Label="@L[model.GetMemberDescription(x=>x.Href)]" @bind-Value="model.Href" For="@(() => model.Href)" Required="false" RequiredError="@L["href is required!"]"></MudTextField>
				</MudItem>
				<MudItem xs="12" md="6">
					<MudTextField Label="@L[model.GetMemberDescription(x=>x.Target)]" @bind-Value="model.Target" For="@(() => model.Target)" Required="false" RequiredError="@L["target is required!"]"></MudTextField>
				</MudItem>
				<MudItem xs="12" md="6">
					<MudEnumSelect TEnum="Nullable<PageStatus>" Label="@L[model.GetMemberDescription(x=>x.PageStatus)]" @bind-Value="model.PageStatus" For="@(() => model.PageStatus)" Required="false" RequiredError="@L["page status is required!"]"></MudEnumSelect>
				</MudItem>
				<MudItem xs="12" md="6">
                    <MudNumericField Label="@L[model.GetMemberDescription(x=>x.SerialNo)]" @bind-Value="model.SerialNo" For="@(() => model.SerialNo)"></MudNumericField>
				</MudItem>
                <MudItem xs="12" md="6">
					<MudCheckBox Label="@L[model.GetMemberDescription(x=>x.IsParent)]" @bind-Checked="model.IsParent" @bind-Value="model.IsParent" For="@(() => model.IsParent)"></MudCheckBox>
				</MudItem>

			</MudGrid>
		</MudForm>
	</DialogContent>
	<DialogActions>
		<MudButton OnClick="Cancel">@ConstantString.Cancel</MudButton>
		<MudLoadingButton Loading="@_savingnew" OnClick="SaveAndNew">@ConstantString.SaveAndNew</MudLoadingButton>
		<MudLoadingButton Loading="@_saving" OnClick="Submit">@ConstantString.Save</MudLoadingButton>
	</DialogActions>
</MudDialog>

@code {
	private MenuSectionDto selectedItem;
	private IconItem selectedIcon;
	private List<IconItem> allIcons = new();
	MudForm? _form;
	private bool _saving = false;
	private bool _savingnew = false;
	[CascadingParameter]
	IMudDialogInstance MudDialog { get; set; } = default!;
	AddEditMenuSectionItemCommandValidator _modelValidator = new();
	[EditorRequired][Parameter] public AddEditMenuSectionItemCommand model { get; set; } = new();
	[Inject] ISelectListService<MenuSectionDto> _selectListService { get; set; }

	private IEnumerable<MenuSectionDto> menuSections = new List<MenuSectionDto>();

	protected override async Task OnInitializedAsync()
	{
		menuSections = await _selectListService.GetSelectList(SelectListConstants.GetMenuSectionSelectList, new { });
		selectedItem = menuSections
		.FirstOrDefault(e => e.Id == model.MenuSectionId) ?? new MenuSectionDto();

		//populate the list of icons
		allIcons = typeof(Icons.Material.Filled)
		.GetFields()
		.Select(field => new IconItem
			{
				Name = field.Name,
				Value = field.GetValue(null)?.ToString() ?? string.Empty
			})
		.ToList();
	}

	private async Task<IEnumerable<MenuSectionDto>> SearchItems(string searchText, CancellationToken cancellationToken)
	{
		if (string.IsNullOrWhiteSpace(searchText))
			return menuSections.AsEnumerable();

		return menuSections.Where(x => x.Title.Contains(searchText, StringComparison.OrdinalIgnoreCase));
	}

	// private void OnValueChanged(SelectListDto value)
	// {
	//     selectedItem = value;
	//     // Assign the selected item's Id to MenuSectionId
	//     model.MenuSectionId = value?.Id ?? 0; // Assuming 0 is a default value
	// }

	async Task Submit()
	{
		try
		{
			_saving = true;
			await _form!.Validate().ConfigureAwait(false);
			if (!_form!.IsValid)
				return;

			model.MenuSectionId = selectedItem.Id;
			var result = await Mediator.Send(model);
			result.Match(data =>
			{
				MudDialog.Close(DialogResult.Ok(true));
				Snackbar.Add(ConstantString.SaveSuccess, MudBlazor.Severity.Info);
				return data;
			}, errors =>
			{
				Snackbar.Add(errors, MudBlazor.Severity.Error);
				return -1;
			});
		}
		finally
		{
			_saving = false;
		}
	}
	async Task SaveAndNew()
	{
		try
		{
			_savingnew = true;
			await _form!.Validate().ConfigureAwait(false);
			if (!_form!.IsValid)
				return;

			model.MenuSectionId = selectedItem.Id;
			var result = await Mediator.Send(model);
			await result.MatchAsync(async data =>
			{
				Snackbar.Add(ConstantString.SaveSuccess, MudBlazor.Severity.Info);
				await Task.Delay(300);
				model = new AddEditMenuSectionItemCommand() { };
				return data;
			}, errors =>
			{
				Snackbar.Add(errors, MudBlazor.Severity.Error);
				return Task.FromResult(-1);
			});
		}
		finally
		{
			_savingnew = false;
		}
	}
	void Cancel() => MudDialog.Cancel();

	private Task<IEnumerable<IconItem>> SearchIcons(string searchText, CancellationToken cancellationToken)
	{
		if (string.IsNullOrWhiteSpace(searchText))
			return Task.FromResult(allIcons.AsEnumerable());

		var result = allIcons
			.Where(icon => icon.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase));

		return Task.FromResult(result);
	}

	private void OnIconChanged(IconItem icon)
	{
		selectedIcon = icon;
		model.Icon = icon.Value;
	}
}