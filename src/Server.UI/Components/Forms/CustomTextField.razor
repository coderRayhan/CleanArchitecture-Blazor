@using System.Linq.Expressions
<style>
	.form-group {
		margin-bottom: 1rem; /* Space between form controls */
	}

	.form-label {
		display: inline-block; /* Ensures the label aligns properly */
		margin-bottom: 0.5rem; /* Space between label and input */
		font-weight: 600; /* Slightly bold for better readability */
		color: #212529; /* Default text color */
		font-size: 17px;
		margin-left: auto;
		margin-right: 0px;
	}

	.form-control {
		display: block; /* Makes the input take full width */
		width: 100%; /* Ensures the input spans the width of the parent */
		height: calc(1.5em + 0.75rem + 2px); /* Default height for inputs */
		padding: 0.375rem 0.75rem; /* Padding inside the input */
		font-size: 1rem; /* Font size for input text */
		font-weight: 400; /* Normal font weight */
		line-height: 1.5; /* Line height for better readability */
		color: #495057; /* Text color */
		background-color: #fff; /* Background color */
		background-clip: padding-box; /* Prevents background bleeding */
		border: 1px solid #ced4da; /* Border color */
		border-radius: 0.375rem; /* Rounded corners */
		transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
	}

		/* Focus state for form controls */
		.form-control:focus {
			color: #495057;
			background-color: #fff;
			border-color: #86b7fe; /* Blue border on focus */
			outline: 0;
			box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25); /* Blue glow on focus */
		}
</style>

<MudGrid Class="ma-0 pa-0 form-group" Spacing="0">
	<MudItem xs="3" Class="d-flex flex-end">
		<label class="form-label">@Label</label>
		@if (IsRequired)
		{
			<span style="color: red; font-weight:600">*</span>
		}
	</MudItem>
	<MudItem xs="1"></MudItem>
	<MudItem xs="8" Class="d-flex flex-row gap-1">
		<InputText class="form-control"
				   ValueChanged="(value) => ValueChanged.InvokeAsync(value)"
				   ValueExpression="@ValueExpression"
				   Value="@Value"
				   @oninput="OnInput"
				   @onblur="OnBlur"
				   @onkeydown="OnKeyDown"
				   placeholder="@Placeholder"
				   disabled="@Disabled"
				   readonly="@Readonly" />
	</MudItem>
	@if (EditContext != null)
	{
		<MudItem xs="12">
			<ValidationMessage For="@(() => Value)" />
		</MudItem>
	}
</MudGrid>
@* <div class="form-group"> *@
@* <label class="form-label">@Label</label> *@
@* <input class="form-control" /> *@
@* </div> *@

@code {
	[CascadingParameter]
	private EditContext? EditContext { get; set; }
	[Parameter]
	public Expression<Func<string>>? ValueExpression { get; set; }
	[Parameter]
	public EventCallback<string> ValueChanged { get; set; }
	[Parameter]
	public string? Label { get; set; }
	[Parameter]
	public bool IsRequired { get; set; } = false;
	[Parameter]
	public string Value { get; set; } = string.Empty;
	[Parameter]
	public string Placeholder { get; set; } = string.Empty;
	[Parameter]
	public bool Disabled { get; set; } = false;
	[Parameter]
	public bool Readonly { get; set; } = false;


	[Parameter]
	public EventCallback OnInput { get; set; }
	[Parameter]
	public EventCallback OnBlur { get; set; }

	[Parameter]
	public EventCallback<KeyboardEventArgs> OnKeyDown { get; set; }

	private async Task OnValueChanged(ChangeEventArgs e)
	{
		var newValue = e.Value?.ToString() ?? string.Empty;
		Value = newValue;
		await ValueChanged.InvokeAsync(newValue);
	}
}
